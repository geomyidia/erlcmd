name: binary release builder

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  releases-matrix:
    name: Release Go binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux darwin]
        goarch: [amd64 arm64]
    steps:
      - uses: actions/checkout@v2

      - name: Set FQ_APP_NAME
        run: echo FQ_APP_NAME=github.com/geomyidia/midiserver >> ${GITHUB_ENV}
      - name: Set APP_VERSION
        run: echo APP_VERSION=$(cat VERSION) >> ${GITHUB_ENV}
      - name: Set BUILD_DATE
        run: echo BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") >> ${GITHUB_ENV}
      - name: Set APP_GITCOMMIT
        run: echo APP_GITCOMMIT=$(git rev-parse --short HEAD) >> ${GITHUB_ENV}
      - name: Set APP_GITBRANCH
        run: echo APP_GITBRANCH=$(git rev-parse --abbrev-ref HEAD) >> ${GITHUB_ENV}
      - name: Set APP_GITSUMMARY
        run: echo APP_GITSUMMARY=$(git describe --tags --dirty --always) >> ${GITHUB_ENV}
      - name: Set APP_GOVERSION
        run: echo APP_GOVERSION=$(make goversion) >> ${GITHUB_ENV}
      - name: Set APP_GOARCH
        run: echo APP_GOARCH=$(make goarch) >> ${GITHUB_ENV}
      - name: Environment Printer
        uses: managedkaos/print-env@v1.0

      - uses: wangyoucao577/go-release-action@v1.19
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          project_path: "./cmd/midiserver"
          binary_name: "midiserver"
          ldflags: -X "${{ env.FQ_APP_NAME }}/pkg/version.version=${{ env.APP_VERSION }}" -X "${{ env.FQ_APP_NAME }}/pkg/version.buildDate=${{ env.BUILD_DATE }}" -X "${{ env.FQ_APP_NAME }}/pkg/version.gitCommit=${{ env.APP_GITCOMMIT }}" -X "${{ env.FQ_APP_NAME }}/pkg/version.gitBranch=${{ env.APP_GITBRANCH }}" -X "${{ env.FQ_APP_NAME }}/pkg/version.gitSummary=${{ env.APP_GITSUMMARY }}" -X "${{ env.FQ_APP_NAME }}/pkg/version.goVersion=${{ env.APP_GOVERSION }}" -X "${{ env.FQ_APP_NAME }}/pkg/version.goArch=${{ env.APP_GOARCH }}"
